"""
Python follows an Object-Oriented Programming (OOP) paradigm,
which helps organize code into reusable objects and follows principles like Encapsulation, Inheritance, and Polymorphism.
"""
# Encapsulation , Abstarction , Inheritance,Polymorphism

# 2Ô∏è‚É£ Encapsulation (Data Hiding)
"""
Encapsulation restricts direct access to data 
by using private (__) and protected (_) attributes.
"""
class BankAccount:
    def __init__(self, balance):
        self.__balance = balance  # Private attribute

    def deposit(self, amount):
        self.__balance += amount

    def get_balance(self):  # Public method to access private attribute
        return self.__balance

account = BankAccount(1000)
account.deposit(500)
print(account.get_balance())  # ‚úÖ Output: 1500
print(account.__balance)  # ‚ùå Error! Attribute is private

#3Ô∏è‚É£ Inheritance (Code Reusability)
"""
Inheritance allows a child class to inherit properties and methods from a parent class.
"""
class Vehicle:
    def __init__(self, brand):
        self.brand = brand

    def show_brand(self):
        return f"Brand: {self.brand}"

class Car(Vehicle):  # üöó Car inherits from Vehicle
    def __init__(self, brand, model):
        super().__init__(brand)  # Calls the parent class constructor
        self.model = model

    def show_info(self):
        return f"{self.show_brand()}, Model: {self.model}"

car = Car("Toyota", "Corolla")
print(car.show_info())  # ‚úÖ Output: Brand: Toyota, Model: Corolla

"""
üîπ Types of Inheritance:

Single Inheritance ‚Äì One parent, one child class.
Multiple Inheritance ‚Äì A child inherits from multiple parent classes.
Multilevel Inheritance ‚Äì A child class inherits from another child class.
Hierarchical Inheritance ‚Äì Multiple child classes inherit from a single parent.
"""

# 4Ô∏è‚É£ Polymorphism (Same Interface, Different Implementation)
# Polymorphism allows different classes to use the same method name but with different behaviors.

class Dog:
    def speak(self):
        return "Bark!"

class Cat:
    def speak(self):
        return "Meow!"

# Polymorphism in action
animals = [Dog(), Cat()]
for animal in animals:
    print(animal.speak())  # ‚úÖ Bark! Meow!

# ‚úÖ Method Overriding (Polymorphism with Inheritance)

class Parent:
    def show(self):
        return "Parent method"

class Child(Parent):
    def show(self):  # Overriding parent method
        return "Child method"

obj = Child()
print(obj.show())  # ‚úÖ Output: Child method

# 5Ô∏è‚É£ Abstraction (Hiding Implementation Details)
"""abstraction allows defining abstract methods in a base class that must be implemented in derived classes."""
from abc import ABC, abstractmethod

class Animal(ABC):  # Abstract base class
    @abstractmethod
    def sound(self):
        pass  # Must be implemented by subclasses


class Dog(Animal):
    def sound(self):
        return "Woof!"

class Cat(Animal):
    def sound(self):
        return "Meow!"

dog = Dog()
print(dog.sound())  # ‚úÖ Output: Woof!

"""
6Ô∏è‚É£ Special (Dunder) Methods in OOP
Python has special methods (dunder methods) to customize object behavior.
"""
class Book:
    def __init__(self, title, price):
        self.title = title
        self.price = price

    def __str__(self):  # String representation
        return f"{self.title} - ${self.price}"

    def __add__(self, other):  # Overloading `+` operator
        return self.price + other.price

b1 = Book("Python 101", 50)
b2 = Book("Advanced Python", 70)
print(b1)  # ‚úÖ Python 101 - $50
print(b1 + b2)  # ‚úÖ 120

# 7Ô∏è‚É£ Class vs. Static Methods
# Instance Method (self) ‚Äì Works on object instance.
class Person:
    def greet(self):  # Instance method
        return "Hello!"

# Class Method (@classmethod) ‚Äì Works on class level.
class Employee:
    count = 0  # Class attribute

    @classmethod
    def increment(cls):
        cls.count += 1

Employee.increment()
print(Employee.count)  # ‚úÖ 1

# Static Method (@staticmethod) ‚Äì No self or cls, independent utility method.
class Math:
    @staticmethod
    def add(a, b):
        return a + b

print(Math.add(3, 5))  # ‚úÖ 8


"""
 Encapsulation ‚Äì Restricts access to class members using private/protected attributes.
‚úî Inheritance ‚Äì Child classes inherit methods and attributes from parent classes.
‚úî Polymorphism ‚Äì Different classes use the same method name with different implementations.
‚úî Abstraction ‚Äì Defines abstract methods that subclasses must implement.
‚úî Dunder Methods ‚Äì Special methods for customizing behavior (__str__, __add__, etc.).
‚úî Class & Static Methods ‚Äì Work with class-level attributes and utility methods.
"""

